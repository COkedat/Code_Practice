"""문제
음이 아닌 정수 X의 자릿수가 가장 큰 자릿수부터 작은 자릿수까지 감소한다면, 그 수를 감소하는 수라고 한다. 
예를 들어, 321과 950은 감소하는 수지만, 322와 958은 아니다. 
N번째 감소하는 수를 출력하는 프로그램을 작성하시오. 
0은 0번째 감소하는 수이고, 1은 1번째 감소하는 수이다. 만약 N번째 감소하는 수가 없다면 -1을 출력한다.

입력
첫째 줄에 N이 주어진다. N은 1,000,000보다 작거나 같은 자연수 또는 0이다.

출력
첫째 줄에 N번째 감소하는 수를 출력한다."""
# 아이디어
# 초기 연구 100만 까지가도 겨우 847개 나옴
# ==> 짱 큰 수라는거
# 근데 결국은 9876543210이 최대네?

# DFS를 써볼까
def dfs_find(path):
    N = int(path[-1]) # 가장 오른쪽 수 뽑기
    nums.append(int(path)) # 일단 저장

    # 가장 오른쪽 수 보다 작은 것들 for문으로 재귀 돌림
    for i in range(0,N):
        dfs_find(path + str(i))

# 초기 값 설정
nums = []

# 원하는 N
M = int(input())

# DFS 돌림
for k in range(0,10):
    dfs_find(str(k))

# 정렬 한번 해줘야함
nums.sort()

if(M >= len(nums)): # 값 벗어나면 -1, 아니면 그냥 출력
    print(-1)
else:
    print(nums[M])